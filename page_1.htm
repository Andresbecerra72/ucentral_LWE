<HTML xmlns="http://www.w3.org/1999/xhtml">

<HEAD>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="" />
    <meta name="author" content="Matthias Edler-Golla, wachenfeld-golla.de" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <meta http-equiv="pragram" content="no-cache" />
    <meta http-equiv="cache-control" content="no-cache, must-revalidate" />
    <meta http-equiv="expires" content="0" />


    <style type="text/css">
        body {
            // background-image: url(img/default.jpg); 
            background: gray;
            background-size: 100%;
            -moz-user-select: none;
            /*ff*/
            -webkit-user-select: none;
            /*webkit*/
            -ms-user-select: none;
            /*IE10*/
            -khtml-user-select: none;
            /*old*/
            user-select: none;
        }
        
        #wrap {
            position: relative;
            margin: auto;
        }
        
        #main {
            position: relative;
            //margin: auto;
            padding: 0;
            top: 0;
            left: 0;
            background-color: white;
            //border:1px solid red;
        }
        
        .textCenter {
            //MARGIN-LEFT: auto;
            vertical-align: middle;
            text-align: center;
            //word-wrap:break-word;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }
    </style>
    <link href="js/jqueryui/jqueryui.css" rel="stylesheet" type="text/css" />
    <link href="css/nav.css" rel="stylesheet" type="text/css" />
    <!-- this script helps older IE versions to understand html5 -->
    <!--[if lt IE 9 ]>
            <script src="js/html5.js"></script>
        <![endif]-->
    <script type="text/javascript" src="/js/utility.js?rdm=162163574"></script>
    <script type="text/javascript" src="/js/storage.js?rdm=162163574"></script>
    <script type="text/javascript" src="/js/bigint.js?rdm=162163574"></script>
    <script type="text/javascript" src="/js/encrypt.js?rdm=162163574"></script>
    <script type="text/javascript" src="/js/ajax.js?rdm=162163574"></script>
    <script type="text/javascript" src="/js/login.js?rdm=162163574"></script>
    <script type="text/javascript" src="/js/pagecommon.js?rdm=162163574"></script>
    <script type="text/javascript" src="/js/binding.js?rdm=162163574"></script>
    <script type="text/javascript" src="js/jquery.js?rdm=162163574"></script>
    <script type="text/javascript" src="js/jqueryui/jqueryui.js?rdm=162163574"></script>
    <script type="text/javascript" src="js/map.js?rdm=162163574"></script>
    <script type="text/javascript" src="js/echart.js?rdm=162163574"></script>
    <script type="text/javascript" src="js/render.js?rdm=162163574"></script>


</HEAD>

<BODY onload="loadPage()">
    <div style="position: fixed;top: 0;left: 0;width: 100%;height: 100%;z-index: 1000; background-color:gray;opacity: 0.98;" id="loadingDiv">
        <p style="position: relative;text-align: center;color:white;top: 45%;" class="blink">LOADING...</p>
    </div>
    <DIV id="wrap">
        <div id="main" onclick="renderJs.hideMenu()" prefix="Siemens" style="width: 1900px; height: 1060px; background-image: url(file:///C:/Users/ANDRES/Documents/ABSOFTWARE/UniversidadCentral/Proyectos%20PLCs/LWE%20caldera/img/E04A0345.png); background-size: 1900px 1060px; margin: 0px; padding: 0px; top: 0px; left: 0px; background-position: 0px 0px; background-repeat: no-repeat no-repeat;"
            bg_image="img/E04A0345.png">



            <div class="TextComponent" comp_type="TextComponent" style="overflow: hidden; line-height: 100%; position: absolute; left: 524px; top: 115px; width: 501px; height: 41px; background-size: 501px 42px; transform: rotate(0deg); font-style: normal; font-family: Arial; font-size: 36px; color: rgb(204, 204, 204); z-index: 4; font-weight: bold; background-repeat: no-repeat no-repeat;"
                id="4ed890abb3562f42b424" degree="0" text_align="center">

                <p style="display: table-cell; vertical-align: middle; text-align: center; width: 501px; height: 41px;">Test Page</p>

            </div>



            <div class="TextComponent" comp_type="TextComponent" style="overflow: hidden; line-height: 100%; position: absolute; left: 648px; top: 243px; width: 252px; height: 41px; background-size: 252px 42px; transform: rotate(0deg); font-style: normal; font-family: Arial; font-size: 14px; color: rgb(204, 204, 204); z-index: 3; background-repeat: no-repeat no-repeat;"
                id="4fbfa049f1238392898c" degree="0" text_align="center">
                <p style="display: table-cell; vertical-align: middle; text-align: center; width: 252px; height: 41px;">@ 2021 abSoftWare</p>
            </div>

            <!-- **** script ***  -->

            <script>
                // almacenando IDs en Local store
                function storeIdent() {

                    // Fallas - Inputs
                    localStorage.setItem('I1', '461282ada40a7b641dc2'); // id
                    localStorage.setItem('I2', '485486eb5f017f6c8938'); // id
                    localStorage.setItem('I3', '4cb48140ac09ef7ffa44'); // id
                    localStorage.setItem('I4', '4da2a582a2efceb83a7b'); // id
                    localStorage.setItem('I5', '412fb50e3bcc940bc904'); // id

                    // Fallas - Contadores
                    localStorage.setItem('B005', 'inputVal invalid4320bf80b4d7fc283cc8'); // class




                    // mantto - Inputs
                    localStorage.setItem('I6', '437c9a6bbd1531e9a931');
                    localStorage.setItem('I7', '44d3bfa0dd0ba3ce5809');


                    setTimeout(monitoreStore(), 5000);

                }


                // inicia la Observacion de los elementos
                function monitoreStore() {

                    var I1 = localStorage.getItem('I1');
                    var I2 = localStorage.getItem('I2');
                    var I3 = localStorage.getItem('I3');
                    var I4 = localStorage.getItem('I4');
                    var I5 = localStorage.getItem('I5');

                    var B005 = localStorage.getItem('B005');



                    if (I1) {
                        observerByID(I1);
                    }
                    if (I2) {
                        observerByID(I2);
                    }
                    if (I3) {
                        observerByID(I3);
                    }
                    if (I4) {
                        observerByID(I4);
                    }
                    if (I5) {
                        observerByID(I5);
                    }
                    if (B005) {
                        observerByClass(B005); // contador total fallas
                    }




                }



                // captura el valor del elemento y lo almacena en localStorage
                function getElementValueByClass(clase) {

                    var allElements = document.querySelectorAll('*');
                    for (var i = 0; i < allElements.length; i++) {
                        if (allElements[i].hasAttribute("class")) {
                            console.log(allElements[i].className);
                            if (allElements[i].className.includes(clase)) {

                                // console.log("I see the class", allElements[i]);
                                localStorage.setItem(String(clase), String(allElements[i].placeholder));

                                return allElements[i];

                            }
                        }
                    }

                }


                // captura el valor del elemento y lo almacena en localStorage
                function getElementValue(id) {

                    var oRequest = new DBRequest(document.getElementById(id));
                    // console.log("Element ID ", id);
                    // console.log("Element value ", oRequest.m_oSrcElement.value);

                    localStorage.setItem(String(id), String(oRequest.m_oSrcElement.value));

                }

                // funcion para definir el nombre falla - mantto
                function get_Name(id) {

                    let name = '--';

                    switch (id) {
                        case localStorage.getItem('I1'):
                            name = "FALLA BOMBA";
                            break;
                        case localStorage.getItem('I2'):
                            name = "PARADA EMERGENCIA";
                            break;
                        case localStorage.getItem('I3'):
                            name = "BAJO NIVEL AGUA";
                            break;
                        case localStorage.getItem('I4'):
                            name = "BAJO NIVEL COMBUSTIBLE";
                            break;
                        case localStorage.getItem('I5'):
                            name = "FALLA QUEMADOR";
                            break;
                        case localStorage.getItem('I6'):
                            name = "---";
                            break;
                        case localStorage.getItem('I7'):
                            name = "---";
                            break;
                        case localStorage.getItem('B005'):
                            name = "TOTAL FALLAS";
                    }


                    return name;



                }
                // funcion para definir el descripcion falla - mantto
                function get_Message(id) {

                    let message = '--';

                    switch (id) {
                        case localStorage.getItem('I1'):
                            message = "REVISAR RED ELECTRICA - REV FILTROS - REV IMPULSOR - REV RED FLUIDOS";
                            break;
                        case localStorage.getItem('I2'):
                            message = "REVISAR BOTON - EXTRAERLO - REVISAR SEÑAL ELECTRICA - REEMPLAZAR BOTON";
                            break;
                        case localStorage.getItem('I3'):
                            message = "REVISAR TANQUE - REVISAR VALVULAS - REVISAR ENCEND. BOMBA - REVISAR FLUJO";
                            break;
                        case localStorage.getItem('I4'):
                            message = "REVISAR NIVEL  TANQUE - REVI VALVULAS - REVI BOMBA PREND - REVI CIRCUITO ELECTRICO";
                            break;
                        case localStorage.getItem('I5'):
                            message = "REVISAR CIRCUITO - REVISAR LENTE - REV ELECTRODOS - REV VENTILADOR - REV COMBUSTIBLE";
                            break;
                        case localStorage.getItem('I6'):
                            message = "---";
                            break;
                        case localStorage.getItem('I7'):
                            message = "---";
                            break;
                        case localStorage.getItem('B005'):
                            message = "---";
                    }


                    return message;



                }
                // funcion para definir el count falla - mantto
                function get_Count(id) {

                    let count = 0;
                    var elementByClass;

                    switch (id) {
                        case localStorage.getItem('I1'):
                            elementByClass = getElementValueByClass("inputVal invalid4ddb9a597b87c042f5da");
                            count = parseInt(elementByClass.placeholder, 10);
                            break;
                        case localStorage.getItem('I2'):
                            elementByClass = getElementValueByClass("inputVal invalid48d595fcac723d979cc6");
                            count = parseInt(elementByClass.placeholder, 10);
                            break;
                        case localStorage.getItem('I3'):
                            elementByClass = getElementValueByClass("inputVal invalid488988fbb9b2b749750b");
                            count = parseInt(elementByClass.placeholder, 10);
                            break;
                        case localStorage.getItem('I4'):
                            elementByClass = getElementValueByClass("inputVal invalid481cad6ae20762e72da0");
                            count = parseInt(elementByClass.placeholder, 10);
                            break;
                        case localStorage.getItem('I5'):
                            elementByClass = getElementValueByClass("inputVal invalid4708a4abecdbc897984f");
                            count = parseInt(elementByClass.placeholder, 10);
                            break;
                        case localStorage.getItem('I6'):
                            count = 0;
                            break;
                        case localStorage.getItem('I7'):
                            count = 0;


                    }


                    return count;



                }

                // --------------------------------------------------------------------------------------------------------------------
                // funcion para OBSERVAR cambios en los atributos del elementoDOM - BY ID
                function observerByID(id) {

                    getElementValue(id); // almacena el valor actual del elemento

                    const MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

                    // target
                    const elementDOM = document.getElementById(id);
                    // options
                    const config = {
                        attributes: true, // solo observa atributos
                        childList: false,
                        characterData: false,
                        subtree: false,
                    };


                    // instance
                    const observer = new MutationObserver(function(mutations) {

                        mutations.forEach(function(mutation) {

                            if (mutation.type === "attributes") { // identifica solo cambios en los atributos                             

                                if (String(mutation.target.value) !== localStorage.getItem(String(id))) { // si se realiza un cambio

                                    localStorage.setItem(String(id), String(mutation.target.value)); // actualiza localStorage

                                    if (String(mutation.target.value) === '1') {

                                        const name = get_Name(String(id));
                                        const message = get_Message(String(id));
                                        const count = get_Count(String(id));

                                        post_data(name, count, message);

                                    }

                                }

                            }
                        });
                    });

                    observer.observe(elementDOM, config);

                }

                // funcion para OBSERVAR cambios en los atributos del elementoDOM - BY Clase
                function observerByClass(clase) {



                    const MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

                    // target
                    const elementDOM = getElementValueByClass(clase); // almacena el valor actual del elemento
                    // options
                    const config = {
                        attributes: true, // solo observa atributos
                        childList: false,
                        characterData: false,
                        subtree: false,
                    };


                    // instance
                    const observer = new MutationObserver(function(mutations) {

                        mutations.forEach(function(mutation) {

                            if (mutation.type === "attributes") { // identifica solo cambios en los atributos                             

                                if (String(mutation.target.placeholder) !== localStorage.getItem(String(clase))) { // si se realiza un cambio

                                    localStorage.setItem(String(clase), String(mutation.target.placeholder)); // actualiza localStorage


                                    const name = get_Name(String(clase));
                                    const message = get_Message(String(clase));


                                    post_data(name, mutation.target.placeholder, message);



                                }

                            }
                        });
                    });

                    observer.observe(elementDOM, config);

                }

                // -----------------------------------------------------------------------------------------------------------------
                // envia los datos al DB
                function post_data(name, value, message) {


                    const params = {
                        name: name,
                        count: value,
                        message: message
                    }

                    var http = new XMLHttpRequest();
                    http.open("POST", "http://localhost/ucentral-API/fails");
                    http.setRequestHeader('Content-type', 'application/json');
                    http.setRequestHeader('Authorization', 'Basic NzBlYzZmYTRkNmVlMmEyZWFlZDRhODA5NmFiYTJlYWE6M2NlODBmZDA3ZGI2ZTRjYzcyZDE3NDQ5YWIxMzllYjU=');
                    http.send(JSON.stringify(params));
                    // http.onload = function() {                        
                    //     alert(http.responseText)
                    // }                   

                }




                //------------INICIO-------------------------------
                window.onload = function() {

                    storeIdent();

                };


                /*
                inputVal invalid4320bf80b4d7fc283cc8
    

                    var oRequest = new DBRequest(document.getElementById(id));
                    console.log("AQUI oRequest: ", oRequest);
                    console.log("AQUI oRequest.m_oSrcElement: ", oRequest.m_oSrcElement);
                    console.log("AQUI oRequest.m_oSrcElement.value: ", oRequest.m_oSrcElement.value);

                */
            </script>



            <!-- *** END div main *** -->


        </div>
    </DIV>
    <div id='timeout_dlg' style='display: none'>Please check the network connection!</div>






</BODY>

</HTML>